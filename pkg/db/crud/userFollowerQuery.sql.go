// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: userFollowerQuery.sql

package crud

import (
	"context"
)

const checkFollower = `-- name: CheckFollower :one
SELECT id, source_id, target_id, status_ FROM user_follower
WHERE source_id = ? AND target_id = ? AND (status_= 1 OR status_ = 2)
`

type CheckFollowerParams struct {
	SourceID int64
	TargetID int64
}

func (q *Queries) CheckFollower(ctx context.Context, arg CheckFollowerParams) (UserFollower, error) {
	row := q.db.QueryRowContext(ctx, checkFollower, arg.SourceID, arg.TargetID)
	var i UserFollower
	err := row.Scan(
		&i.ID,
		&i.SourceID,
		&i.TargetID,
		&i.Status,
	)
	return i, err
}

const createFollower = `-- name: CreateFollower :one
INSERT INTO user_follower (
  source_id, target_id, status_
) VALUES (
  ?, ?, ?
)
RETURNING id, source_id, target_id, status_
`

type CreateFollowerParams struct {
	SourceID int64
	TargetID int64
	Status   int64
}

func (q *Queries) CreateFollower(ctx context.Context, arg CreateFollowerParams) (UserFollower, error) {
	row := q.db.QueryRowContext(ctx, createFollower, arg.SourceID, arg.TargetID, arg.Status)
	var i UserFollower
	err := row.Scan(
		&i.ID,
		&i.SourceID,
		&i.TargetID,
		&i.Status,
	)
	return i, err
}

const deleteFollower = `-- name: DeleteFollower :exec
DELETE FROM user_follower
WHERE source_id = ? AND target_id = ?
`

type DeleteFollowerParams struct {
	SourceID int64
	TargetID int64
}

func (q *Queries) DeleteFollower(ctx context.Context, arg DeleteFollowerParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollower, arg.SourceID, arg.TargetID)
	return err
}

const getFollowers = `-- name: GetFollowers :many
SELECT id, source_id, target_id, status_ FROM user_follower
WHERE target_id = ?
`

func (q *Queries) GetFollowers(ctx context.Context, targetID int64) ([]UserFollower, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, targetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserFollower
	for rows.Next() {
		var i UserFollower
		if err := rows.Scan(
			&i.ID,
			&i.SourceID,
			&i.TargetID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowings = `-- name: GetFollowings :many
SELECT id, source_id, target_id, status_ FROM user_follower
WHERE source_id = ?
`

func (q *Queries) GetFollowings(ctx context.Context, sourceID int64) ([]UserFollower, error) {
	rows, err := q.db.QueryContext(ctx, getFollowings, sourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserFollower
	for rows.Next() {
		var i UserFollower
		if err := rows.Scan(
			&i.ID,
			&i.SourceID,
			&i.TargetID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const replyFollowReq = `-- name: ReplyFollowReq :exec
UPDATE user_follower
set status_ = 1
WHERE source_id = ? AND target_id = ?
`

type ReplyFollowReqParams struct {
	SourceID int64
	TargetID int64
}

func (q *Queries) ReplyFollowReq(ctx context.Context, arg ReplyFollowReqParams) error {
	_, err := q.db.ExecContext(ctx, replyFollowReq, arg.SourceID, arg.TargetID)
	return err
}

const updateFollower = `-- name: UpdateFollower :one
UPDATE user_follower
set status_ = ?
WHERE source_id = ? AND target_id = ?
RETURNING id, source_id, target_id, status_
`

type UpdateFollowerParams struct {
	Status   int64
	SourceID int64
	TargetID int64
}

func (q *Queries) UpdateFollower(ctx context.Context, arg UpdateFollowerParams) (UserFollower, error) {
	row := q.db.QueryRowContext(ctx, updateFollower, arg.Status, arg.SourceID, arg.TargetID)
	var i UserFollower
	err := row.Scan(
		&i.ID,
		&i.SourceID,
		&i.TargetID,
		&i.Status,
	)
	return i, err
}
