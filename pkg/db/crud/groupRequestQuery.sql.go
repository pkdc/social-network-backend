// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: groupRequestQuery.sql

package crud

import (
	"context"
)

const createGroupRequest = `-- name: CreateGroupRequest :one
INSERT INTO group_request (
  user_id, group_id, status_
) VALUES (
  ?, ?, ?
)
RETURNING id, user_id, group_id, status_
`

type CreateGroupRequestParams struct {
	UserID  int64
	GroupID int64
	Status  string
}

func (q *Queries) CreateGroupRequest(ctx context.Context, arg CreateGroupRequestParams) (GroupRequest, error) {
	row := q.db.QueryRowContext(ctx, createGroupRequest, arg.UserID, arg.GroupID, arg.Status)
	var i GroupRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.Status,
	)
	return i, err
}

const deleteGroupRequest = `-- name: DeleteGroupRequest :exec
DELETE FROM group_request
WHERE group_id = ? AND user_id = ?
`

type DeleteGroupRequestParams struct {
	GroupID int64
	UserID  int64
}

func (q *Queries) DeleteGroupRequest(ctx context.Context, arg DeleteGroupRequestParams) error {
	_, err := q.db.ExecContext(ctx, deleteGroupRequest, arg.GroupID, arg.UserID)
	return err
}

const getAllGroupReq = `-- name: GetAllGroupReq :many
SELECT id, user_id, group_id, status_ FROM group_request
`

func (q *Queries) GetAllGroupReq(ctx context.Context) ([]GroupRequest, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroupReq)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupRequest
	for rows.Next() {
		var i GroupRequest
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GroupID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGroupRequests = `-- name: GetAllGroupRequests :many
SELECT id, user_id, group_id, status_ FROM group_request
WHERE group_id = ?
`

func (q *Queries) GetAllGroupRequests(ctx context.Context, groupID int64) ([]GroupRequest, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroupRequests, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupRequest
	for rows.Next() {
		var i GroupRequest
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GroupID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupRequests = `-- name: GetGroupRequests :many
SELECT id, user_id, group_id, status_ FROM group_request
WHERE group_id = ? AND status_ = ?
`

type GetGroupRequestsParams struct {
	GroupID int64
	Status  string
}

func (q *Queries) GetGroupRequests(ctx context.Context, arg GetGroupRequestsParams) ([]GroupRequest, error) {
	rows, err := q.db.QueryContext(ctx, getGroupRequests, arg.GroupID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupRequest
	for rows.Next() {
		var i GroupRequest
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GroupID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupRequestsByUser = `-- name: GetGroupRequestsByUser :many
SELECT id, user_id, group_id, status_ FROM group_request
WHERE user_id = ?
`

func (q *Queries) GetGroupRequestsByUser(ctx context.Context, userID int64) ([]GroupRequest, error) {
	rows, err := q.db.QueryContext(ctx, getGroupRequestsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupRequest
	for rows.Next() {
		var i GroupRequest
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GroupID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroupRequest = `-- name: UpdateGroupRequest :one
UPDATE group_request
set status_ = ?
WHERE group_id = ? AND user_id = ?
RETURNING id, user_id, group_id, status_
`

type UpdateGroupRequestParams struct {
	Status  string
	GroupID int64
	UserID  int64
}

func (q *Queries) UpdateGroupRequest(ctx context.Context, arg UpdateGroupRequestParams) (GroupRequest, error) {
	row := q.db.QueryRowContext(ctx, updateGroupRequest, arg.Status, arg.GroupID, arg.UserID)
	var i GroupRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.Status,
	)
	return i, err
}
