// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: groupPostCommentQuery.sql

package crud

import (
	"context"
	"time"
)

const createGroupPostComment = `-- name: CreateGroupPostComment :one
INSERT INTO group_post_comment (
  author, group_post_id, message_, created_at
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, author, group_post_id, message_, created_at
`

type CreateGroupPostCommentParams struct {
	Author      int64
	GroupPostID int64
	Message     string
	CreatedAt   time.Time
}

func (q *Queries) CreateGroupPostComment(ctx context.Context, arg CreateGroupPostCommentParams) (GroupPostComment, error) {
	row := q.db.QueryRowContext(ctx, createGroupPostComment,
		arg.Author,
		arg.GroupPostID,
		arg.Message,
		arg.CreatedAt,
	)
	var i GroupPostComment
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.GroupPostID,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroupPostComment = `-- name: DeleteGroupPostComment :exec
DELETE FROM group_post_comment
WHERE group_post_id = ? AND author = ? AND id = ?
`

type DeleteGroupPostCommentParams struct {
	GroupPostID int64
	Author      int64
	ID          int64
}

func (q *Queries) DeleteGroupPostComment(ctx context.Context, arg DeleteGroupPostCommentParams) error {
	_, err := q.db.ExecContext(ctx, deleteGroupPostComment, arg.GroupPostID, arg.Author, arg.ID)
	return err
}

const getGroupPostComments = `-- name: GetGroupPostComments :many
SELECT id, author, group_post_id, message_, created_at FROM group_post_comment
WHERE group_post_id = ?
ORDER BY created_at
`

func (q *Queries) GetGroupPostComments(ctx context.Context, groupPostID int64) ([]GroupPostComment, error) {
	rows, err := q.db.QueryContext(ctx, getGroupPostComments, groupPostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupPostComment
	for rows.Next() {
		var i GroupPostComment
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.GroupPostID,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
