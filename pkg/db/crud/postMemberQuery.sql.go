// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: postMemberQuery.sql

package crud

import (
	"context"
)

const createPostMember = `-- name: CreatePostMember :one
INSERT INTO post_member (
  user_id, post_id
) VALUES (
  ?, ?
)
RETURNING id, user_id, post_id
`

type CreatePostMemberParams struct {
	UserID int64
	PostID int64
}

func (q *Queries) CreatePostMember(ctx context.Context, arg CreatePostMemberParams) (PostMember, error) {
	row := q.db.QueryRowContext(ctx, createPostMember, arg.UserID, arg.PostID)
	var i PostMember
	err := row.Scan(&i.ID, &i.UserID, &i.PostID)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM post_member
WHERE user_id = ? AND post_id = ?
`

type DeleteMemberParams struct {
	UserID int64
	PostID int64
}

func (q *Queries) DeleteMember(ctx context.Context, arg DeleteMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteMember, arg.UserID, arg.PostID)
	return err
}

const getPostMembers = `-- name: GetPostMembers :many
SELECT id, user_id, post_id FROM post_member
WHERE post_id = ?
`

func (q *Queries) GetPostMembers(ctx context.Context, postID int64) ([]PostMember, error) {
	rows, err := q.db.QueryContext(ctx, getPostMembers, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostMember
	for rows.Next() {
		var i PostMember
		if err := rows.Scan(&i.ID, &i.UserID, &i.PostID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
