// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: groupPostQuery.sql

package crud

import (
	"context"
	"time"
)

const createGroupPost = `-- name: CreateGroupPost :one
INSERT INTO group_post (
  author, group_id, message_, image_, created_at
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, author, group_id, message_, image_, created_at
`

type CreateGroupPostParams struct {
	Author    int64
	GroupID   int64
	Message   string
	Image     string
	CreatedAt time.Time
}

func (q *Queries) CreateGroupPost(ctx context.Context, arg CreateGroupPostParams) (GroupPost, error) {
	row := q.db.QueryRowContext(ctx, createGroupPost,
		arg.Author,
		arg.GroupID,
		arg.Message,
		arg.Image,
		arg.CreatedAt,
	)
	var i GroupPost
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.GroupID,
		&i.Message,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroupPost = `-- name: DeleteGroupPost :exec
DELETE FROM group_post
WHERE group_id = ? AND author = ? AND id = ?
`

type DeleteGroupPostParams struct {
	GroupID int64
	Author  int64
	ID      int64
}

func (q *Queries) DeleteGroupPost(ctx context.Context, arg DeleteGroupPostParams) error {
	_, err := q.db.ExecContext(ctx, deleteGroupPost, arg.GroupID, arg.Author, arg.ID)
	return err
}

const getGroupPostById = `-- name: GetGroupPostById :one
SELECT id, author, group_id, message_, image_, created_at FROM group_post
WHERE id = ?
`

func (q *Queries) GetGroupPostById(ctx context.Context, id int64) (GroupPost, error) {
	row := q.db.QueryRowContext(ctx, getGroupPostById, id)
	var i GroupPost
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.GroupID,
		&i.Message,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const getGroupPosts = `-- name: GetGroupPosts :many
SELECT id, author, group_id, message_, image_, created_at FROM group_post
WHERE group_id = ?
ORDER BY created_at
`

func (q *Queries) GetGroupPosts(ctx context.Context, groupID int64) ([]GroupPost, error) {
	rows, err := q.db.QueryContext(ctx, getGroupPosts, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupPost
	for rows.Next() {
		var i GroupPost
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.GroupID,
			&i.Message,
			&i.Image,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
