// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: userMessageQuery.sql

package crud

import (
	"context"
	"time"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO user_message (
  source_id, target_id, message_, created_at
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, source_id, target_id, message_, created_at
`

type CreateMessageParams struct {
	SourceID  int64
	TargetID  int64
	Message   string
	CreatedAt time.Time
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (UserMessage, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.SourceID,
		arg.TargetID,
		arg.Message,
		arg.CreatedAt,
	)
	var i UserMessage
	err := row.Scan(
		&i.ID,
		&i.SourceID,
		&i.TargetID,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM user_message
WHERE source_id = ? AND target_id = ?
`

type DeleteMessageParams struct {
	SourceID int64
	TargetID int64
}

func (q *Queries) DeleteMessage(ctx context.Context, arg DeleteMessageParams) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, arg.SourceID, arg.TargetID)
	return err
}

const getMessages = `-- name: GetMessages :many
SELECT id, source_id, target_id, message_, created_at FROM user_message
WHERE target_id = ? AND source_id = ? OR source_id = ? AND target_id = ?
ORDER BY created_at
`

type GetMessagesParams struct {
	TargetID   int64
	SourceID   int64
	SourceID_2 int64
	TargetID_2 int64
}

func (q *Queries) GetMessages(ctx context.Context, arg GetMessagesParams) ([]UserMessage, error) {
	rows, err := q.db.QueryContext(ctx, getMessages,
		arg.TargetID,
		arg.SourceID,
		arg.SourceID_2,
		arg.TargetID_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserMessage
	for rows.Next() {
		var i UserMessage
		if err := rows.Scan(
			&i.ID,
			&i.SourceID,
			&i.TargetID,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
