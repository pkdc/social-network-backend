// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: groupEventQueries.sql

package crud

import (
	"context"
	"time"
)

const createGroupEvent = `-- name: CreateGroupEvent :one
INSERT INTO group_event (
  author, group_id, title, description_, created_at, date_
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING id, author, group_id, title, description_, created_at, date_
`

type CreateGroupEventParams struct {
	Author      int64
	GroupID     int64
	Title       string
	Description string
	CreatedAt   time.Time
	Date        time.Time
}

func (q *Queries) CreateGroupEvent(ctx context.Context, arg CreateGroupEventParams) (GroupEvent, error) {
	row := q.db.QueryRowContext(ctx, createGroupEvent,
		arg.Author,
		arg.GroupID,
		arg.Title,
		arg.Description,
		arg.CreatedAt,
		arg.Date,
	)
	var i GroupEvent
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.GroupID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.Date,
	)
	return i, err
}

const deleteGroupEvent = `-- name: DeleteGroupEvent :exec
DELETE FROM group_event
WHERE group_id = ? AND id = ?
`

type DeleteGroupEventParams struct {
	GroupID int64
	ID      int64
}

func (q *Queries) DeleteGroupEvent(ctx context.Context, arg DeleteGroupEventParams) error {
	_, err := q.db.ExecContext(ctx, deleteGroupEvent, arg.GroupID, arg.ID)
	return err
}

const getGroupEvent = `-- name: GetGroupEvent :one
SELECT id, author, group_id, title, description_, created_at, date_ FROM group_event
WHERE id = ? AND group_id = ?
`

type GetGroupEventParams struct {
	ID      int64
	GroupID int64
}

func (q *Queries) GetGroupEvent(ctx context.Context, arg GetGroupEventParams) (GroupEvent, error) {
	row := q.db.QueryRowContext(ctx, getGroupEvent, arg.ID, arg.GroupID)
	var i GroupEvent
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.GroupID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.Date,
	)
	return i, err
}

const getGroupEventById = `-- name: GetGroupEventById :one
SELECT id, author, group_id, title, description_, created_at, date_ FROM group_event
WHERE id = ?
`

func (q *Queries) GetGroupEventById(ctx context.Context, id int64) (GroupEvent, error) {
	row := q.db.QueryRowContext(ctx, getGroupEventById, id)
	var i GroupEvent
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.GroupID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.Date,
	)
	return i, err
}

const getGroupEvents = `-- name: GetGroupEvents :many
;

SELECT id, author, group_id, title, description_, created_at, date_ FROM group_event
WHERE group_id = ?
ORDER BY created_at
`

func (q *Queries) GetGroupEvents(ctx context.Context, groupID int64) ([]GroupEvent, error) {
	rows, err := q.db.QueryContext(ctx, getGroupEvents, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupEvent
	for rows.Next() {
		var i GroupEvent
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.GroupID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupEventsWithoutId = `-- name: GetGroupEventsWithoutId :many
SELECT id, author, group_id, title, description_, created_at, date_ FROM group_event
ORDER BY created_at
`

func (q *Queries) GetGroupEventsWithoutId(ctx context.Context) ([]GroupEvent, error) {
	rows, err := q.db.QueryContext(ctx, getGroupEventsWithoutId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupEvent
	for rows.Next() {
		var i GroupEvent
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.GroupID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
